db;


db.createCollection('manufacturers', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name'],
            properties: {
                name: {
                    bsonType: 'string'
                },
                address: {
                    bsonType: 'object',
                    required: ['country', 'city']
                }
            }
        }
    }
});

db.manufacturers.insertMany([
    {
        name: 'First'
    },
    {
        name: 'Second',
        address: {
            country: 'UK',
            city: 'London'
        }
    }
]);


db.createCollection('products', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name', 'price', 'amount', 'manufacturerId'],
            properties: {
                name: {
                    bsonType: 'string',
                },
                price: {
                    bsonType: 'double'
                },
                amount: {
                    bsonType: 'int'
                },
                expiredDate: {
                    bsonType: 'date'
                },
                manufacturerId: {
                    bsonType: "objectId"
                }
            }
        }
    }
});


db.products.insertMany([
    {
        name: 'Samsung',
        price: 22222.22,
        amount: 1,
        manufacturerId: new ObjectId('63e152bfc22295455c64b4b5')
    },
     {
        name: 'Xiaomu',
        price: 111.11,
        amount: 2,
        manufacturerId: new ObjectId('63e152bfc22295455c64b4b5')
    },
     {
        name: 'Sony',
        price: 3333.3,
        amount: 1,
        manufacturerId: new ObjectId('63e152bfc22295455c64b4b5')
    }
]);

/*
Витягти продукти з інформацією про їхнього виробника
*/

db.products.aggregate([
    {
        /**
         * from: The target collection.
         * localField: The local join field.
         * foreignField: The target join field.
         * as: The name for the results.
         * pipeline: Optional pipeline to run on the foreign collection.
         * let: Optional variables to use in the pipeline field stages.
         */
        $lookup: {
          from: 'manufacturers',
          localField: 'manufacturerId',
          foreignField: '_id',
          as: 'manufacturer'
        }
    }, {
        /**
         * path: Path to the array field.
         * includeArrayIndex: Optional name for index.
         * preserveNullAndEmptyArrays: Optional
         *   toggle to unwind null and empty values.
         */
        $unwind: "$manufacturer"
    }, {
        /**
         * Provide the field name to exclude.
         * To exclude multiple fields, pass the field names in an array.
         */
        $unset: 'manufacturerId'
    }, {
        /**
         * _id: The id of the group.
         * fieldN: The first field name.
         */
        $group: {
          _id: "$manufacturer.name",
         countProducts: {
            $sum: "$amount"
          }
        }
    }
]);


////SORT

db.products.aggregate([
    {/**
     * Provide any number of field/order pairs.
     */
    $sort: {
      price: -1
    }}, {
        $limit: 3
    }
]);

//Pagination


db.products.find().limit(3).skip(2);


/*
Зробити колекцію студентів.
- Ім'я
- Прізвище
- мейл
- група

Зробити колекцію груп.
- назва групи
- ім'я викладача.

Завдання:
1. Створити і наповнити 2-3 сутностями кожну колекцію.
2. Порахувати кількість студентів в кожній групі.

*/

db.createCollection('students', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['firstName', 'lastName', 'email', 'groupId'],
            properties: {
                firstName: {
                    bsonType: 'string'
                },
                lastName: {
                    bsonType: 'string'
                },
                email: {
                    bsonType: 'string'
                },
                groupId: {
                    bsonType: 'objectId'
                }

            }
        }
    }
})

db.students.insertMany([
    {
        firstName: 'John',
        lastName: 'Doe',
        email: 'doe123@ukr.net',
        groupId: new ObjectId('63e16b4c34197fc226f080bd')
    },    {
        firstName: 'Jane',
        lastName: 'Doe',
        email: 'doeJane123@ukr.net',
        groupId: new ObjectId('63e16b4c34197fc226f080bd')
    },    {
        firstName: 'Josh',
        lastName: 'bush',
        email: 'bush123@ukr.net',
        groupId: new ObjectId('63e16b4c34197fc226f080be')
    }, {
        firstName: 'Misha',
        lastName: 'Mykh',
        email: 'Misha123@ukr.net',
        groupId: new ObjectId('63e16b4c34197fc226f080be')
    }, {
        firstName: 'Nika',
        lastName: 'Kras',
        email: 'Kras123@ukr.net',
        groupId: new ObjectId('63e16b4c34197fc226f080be')
    },  
]) 


db.createCollection('groups', {
    validator: {
        $jsonSchema: {
            bsonType: 'object',
            required: ['name', 'lector'],
            properties: {
                name: {
                    bsonType: 'string'
                },
                lector: {
                    bsonType: 'string'
                }
            }
        }
    }    
})

db.groups.insertMany([
    {
        name: '13',
        lector: 'SpiderMan'
    },{
        name: '12',
        lector: 'SuperMan'
    }, {
        name: '14',
        lector: 'Halk'
    },
])

db.students.aggregate([
    {/**
     * from: The target collection.
     * localField: The local join field.
     * foreignField: The target join field.
     * as: The name for the results.
     * pipeline: Optional pipeline to run on the foreign collection.
     * let: Optional variables to use in the pipeline field stages.
     */
    $lookup: {
      from: 'groups',
      localField: 'groupId',
      foreignField: '_id',
      as: 'groupInfo'
    }}, { /**
     * path: Path to the array field.
     * includeArrayIndex: Optional name for index.
     * preserveNullAndEmptyArrays: Optional
     *   toggle to unwind null and empty values.
     */
    $unwind: '$groupInfo'
    }, {
        /**
         * Provide the field name to exclude.
         * To exclude multiple fields, pass the field names in an array.
         */
        $unset: 'groupId'
    }, {
        /**
         * _id: The id of the group.
         * fieldN: The first field name.
         */
        $group: {
          _id: '$groupInfo.name',
          countStudents: {
            $sum: 1
          }
        }
    }
])

